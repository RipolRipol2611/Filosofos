import threading
import time
import random

def filosofo(id_f, tenedor_izq, tenedor_der, num_comidas, tiempos):
    comidas_realizadas = 0
    inicio = time.time()
    while comidas_realizadas < num_comidas:
        print(f"Filósofo {id_f} está pensando.")
        time.sleep(random.uniform(0.5, 1.5))  # Tiempo pensando

        print(f"Filósofo {id_f} intenta tomar los tenedores.")
        with tenedor_izq:
            print(f"Filósofo {id_f} tomó el tenedor izquierdo.")
            with tenedor_der:
                print(f"Filósofo {id_f} tomó el tenedor derecho y está comiendo.")
                time.sleep(random.uniform(0.5, 1.5))  # Tiempo comiendo
                comidas_realizadas += 1
                print(f"Filósofo {id_f} terminó de comer ({comidas_realizadas}/{num_comidas}).")

    fin = time.time()
    tiempos[id_f] = fin - inicio
    print(f"Filósofo {id_f} ha terminado todas sus comidas.")

def main():
    # Introducir el número de filósofos
    num_filosofos = int(input("Introduce el número de filósofos: "))
    num_comidas = int(input("Introduce el número de comidas por filósofo: "))

    # Crear tenedores como una lista de semáforos
    tenedores = [threading.Lock() for _ in range(num_filosofos)]

    # Diccionario para almacenar tiempos de cada filósofo
    tiempos = {}

    # Crear y lanzar hilos para los filósofos
    hilos = []
    inicio_global = time.time()
    for i in range(num_filosofos):
        tenedor_izq = tenedores[i]
        tenedor_der = tenedores[(i + 1) % num_filosofos]

        # Para evitar interbloqueo, el último filósofo toma los tenedores en orden inverso
        if i == num_filosofos - 1:
            tenedor_izq, tenedor_der = tenedor_der, tenedor_izq

        hilo = threading.Thread(target=filosofo, args=(i, tenedor_izq, tenedor_der, num_comidas, tiempos))
        hilos.append(hilo)
        hilo.start()

    # Esperar a que todos los hilos terminen
    for hilo in hilos:
        hilo.join()

    fin_global = time.time()

    # Calcular tiempos
    mas_rapido = min(tiempos.values())
    mas_lento = max(tiempos.values())
    print(f"Tiempo total: {fin_global - inicio_global:.2f} segundos")
    print(f"Filósofo más rápido: {mas_rapido:.2f} segundos")
    print(f"Filósofo más lento: {mas_lento:.2f} segundos")

    print("Todos los filósofos han terminado.")

if __name__ == "__main__":
    main()
